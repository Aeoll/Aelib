#include <math.h>
#include <voptype.h>
#include <voplib.h>
#include <pyro_math.h>

// ==========================
// TODO
// ==========================
// Line-Line Dist
// ptlined with extras?
// circ from 2/3 pts etc?

// ==============================
// Vector manipulation
// ==============================

vector normalizeto(vector v; float l) {
    return l*normalize(v);
}

vector2 normalizeto(vector2 v; float l) {
    return l*normalize(v);
}

vector topolar(vector v){
    float r = length(v);
    float th = acos(v.z/r);
    float phi = atan2(v.y, v.x);
    vector a = set(r,th,phi);
    return a;
}

vector2 topolar(vector2 v){
    float r = length(v);
    float th = atan2(v.y, v.x);
    vector2 a = set(r,th);
    return a;
}

vector frompolar(vector v){
    float x=v.x*sin(v.y)*cos(v.z);
    float y=v.x*sin(v.y)*sin(v.z);
    float z=v.x*cos(v.y);
    vector a = set(x,y,z);
    return a;
}

vector2 frompolar(vector2 v){
    float x=v.x*cos(v.y);
    float y=v.x*sin(v.y);
    vector2 a = set(x,y);
    return a;
}

vector toPolar(vector v){
    return topolar(v);
}

vector toCartesian(vector v){
    return frompolar(v);
}

// forward and reverse stereographic projection from 3D-4D
vector4 inverseStereo4(vector p; float mul) {
    float n = dot(p,p)+1;
    return set(p.x*(mul/n),p.y*(mul/n),p.z*(mul/n),(n-2)/n);
}

vector stereo4(vector4 p; float mul) {
    return set(p.x/(1-p.w),p.y/(1-p.w),p.z/(1-p.w));
}

// from hemesh
float distToLine3D(vector p, la, lb){
    vector ab = lb - la;
    vector ap = p - la;
    float e = dot(ap, ab);
    float f = dot(ab, ab);
    float d2 = dot(ap, ap) - e*e/f;
    return sqrt(d2);
}

// from toxiclibs
float ptplanedist(vector p,  o,  n) {
    float sn = -dot(n, p-o);
    float sd = length2(n);
    vector isec = p + n*(sn / sd);
    return distance(isec, p);
}

// ==============================
// Useful maths functions
// ==============================

vector4 rgbtocmyk(vector rgb){
    vector4 cmyk;
    cmyk.x = 1 - rgb.r;
    cmyk.y = 1 - rgb.g;
    cmyk.z = 1 - rgb.b;
    cmyk.w = min(cmyk[0], cmyk[1], cmyk[2]);
    cmyk[0] = clamp(cmyk[0] - cmyk[3], 0, 1);
    cmyk[1] = clamp(cmyk[1] - cmyk[3], 0, 1);
    cmyk[2] = clamp(cmyk[2] - cmyk[3], 0, 1);
    cmyk[3] = clamp(cmyk[3], 0, 1);
    return cmyk;
}

vector cmyktorgb(vector4 cmyk){
    vector rgb;
    rgb[0] = 1.0 - min(1.0f, cmyk.x + cmyk.w);
    rgb[1] = 1.0 - min(1.0f, cmyk.y + cmyk.w);
    rgb[2] = 1.0 - min(1.0f, cmyk.z + cmyk.w);
    return rgb;
}

float aebias(float t, bias){
    return (t / ((((1.0/bias) - 2.0)*(1.0 - t))+1.0));
}

vector aebias(vector t, bias){
    return set(bias(t.x),bias(t.y),bias(t.z));
}

float aegain(float t, gain){
    if(t < 0.5) {
        return bias(t * 2.0,gain)/2.0;
    }
    else {
        return bias(t * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;
    }
}

vector aegain(vector t, gain){
    if(t < 0.5) {
        return bias(t * 2.0,gain)/2.0;
    }
    else {
        return bias(t * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;
    }
}

float sq(float x){
    return pow(x, 2.0);
}

float sinc(float x) {
  float pix = M_PI*x;
  if (x == 0) {
    return 1.0;
  }
  else {
    return (sin(pix) / pix);
  }
}

// some rand functions. For no seed, use a hash of sys time? this is probably dumb..
int randint(int a; int b){
    int sd = random_shash(__DATE__+__TIME__);
    return int(fit01(rand(sd), a, b+1));
}

int randint(int a; int b; int seed){
    return int(fit01(rand(seed), 0, b+1-a))+a;
}

vector randint(int a; int b; int seed){
    int aa = int(fit01(rand(seed), a, b+1));
    int bb = int(fit01(rand(seed*3+1122), a, b+1));
    int cc = int(fit01(rand(seed*7-944), a, b+1));
    return set(aa,bb,cc);
}

float randuniform(float a; float b){
    int sd = random_shash(__DATE__+__TIME__);
    return fit01(rand(sd), a, b+1);
}

float randuniform(float a; float b; int seed){
    return fit01(rand(seed), a, b+1);
}

//======================
// Smoothsteps
//======================

float smoothstep(float x){
    return x * x * (3 - 2 * x);
}

float smoothstep(float e0, e1, t){
    float x = clamp((t - e0) / (e1 - e0), 0.0, 1.0);
    return x * x * (3 - 2 * x);
}

//double smoothsteps
float doublesmoothstep(float e0, e1, e2, e3, t){
    float x = smoothstep(e0, e1, t);
    float y = 1- smoothstep(e2, e3, t);
    return min(x, y);
}

float dsmooth(float e0, e1, e2, e3, t){
    return doublesmoothstep(e0, e1, e2, e3, t);
}

// ends at 0 and 1
float doublesmoothstep(float e1, e2, t){
    float x = smoothstep(0, e1, t);
    float y = 1- smoothstep(e2, 1, t);
    return min(x, y);
}

float dsmooth(float e1, e2, t){
    return doublesmoothstep(e1, e2, t);
}

//smoothersteps
float smootherstep(float x){
    return x*x*x*(x*(x*6 - 15) + 10);
}

float smootherstep(float e0, e1, t){
    float x = clamp((t - e0) / (e1 - e0), 0.0, 1.0);
    return x*x*x*(x*(x*6 - 15) + 10);
}

vector smoothstep(float e0, e1; vector t){
    vector x = clamp((t - e0) / (e1 - e0), 0.0, 1.0);
    return x * x * (3 - 2 * x);
}

vector smootherstep(float e0, e1; vector t){
    vector x = clamp((t - e0) / (e1 - e0), 0.0, 1.0);
    return x*x*x*(x*(x*6 - 15) + 10);
}

// normal step function??
float step(float e0, t){
    return (t<e0)?0:1;
}

//======================
//======================
// clamps to new range and then fits back to initial range
float fitclamp(float t, clampStart, clampEnd, fitStart, fitEnd){
    return fit(clamp(t, clampStart, clampEnd), clampStart, clampEnd, fitStart,fitEnd);
}

// clamps to new range and then fits back to 0-1
float fitclamp01(float t, clampStart, clampEnd){
    return fit(clamp(t, clampStart, clampEnd), clampStart, clampEnd, 0,1);
}

// maps a 0->1 edge of the form _/'' to a symmetric triangular pulse (0->h->0) over the edge width _/\_
float ramptotri(float t, h){
    float a = 1-2*abs(0.5 - t);
    return a*h;
}

float ramptotri(float t){
    return 1-2*abs(0.5 - t);
}

float heading(vector2 v){
    return atan2(v.y, v.x);
}

vector heading(vector v){
    return set(atan2(v.y, v.x), atan2(v.z, v.x), atan2(v.z, v.y));
}

// rint with float step
float rfloat(float step, value){
    return step * rint(value/step);
}

// rint with float step
vector rfloat(float step; vector value){
    return step * rint(value/step);
}

float floorfloat(float step, value){
    return step * floor(value/step);
}

float floorfloat(float step; vector value){
    return step * floor(value/step);
}

float fitu(float val, s0,s1, t0,t1){
    return efit(val, s0,s1, t0,t1);
}

float fitu01(float val, t0,t1){
    return efit(val, 0, 1, t0, t1);
}

float angBetween(vector a; vector b){
    return acos(dot(normalize(a), normalize(b)));
}

float nrand(float seed){
    return fit01(rand(seed), -1, 1);
}

// constrains vector to angle multiplier (e.g $PI/2 for x/y/z axes only)
vector angleConstrain(vector v; float ang){
    vector a = topolar(v);
    a.y = rfloat(ang, a.y);
    a.z = rfloat(ang, a.z);
    return frompolar(a);
}

// ==============================
// Geometry functions (using ptnum or primnum etc)
// ==============================
// This is perhaps quite slow? use UV Texture instead
float curveuv(int ptnum, primnum){
    int v = pointvertex(geoself(), ptnum);
    int ind = vertexprimindex(geoself(), v);
    int npts = len(primpoints(0, primnum));
    return float(ind) / (npts-1);
}

int primpointsfrompt(int ptnum){
    int v = pointvertex(geoself(), ptnum);
    int ind = vertexprimindex(geoself(), v);
    int npts[] = primpoints(0, primnum);
}

// idtopoint but with custom id attribute (eg match ptid instead id)
int idtopoint(const int opnum; const string idattr; const int id){
    if (hasattrib(opnum, 'point', idattr))
        return findattribval(opnum, 'point', idattr, id);
    if (id < npoints(opnum))
        return id;
    return -1;
}

// quickly get positions of all primpoints
function vector[] primpointpositions(int input; int prim){
    int pts[] = primpoints(input, prim);
    vector positions[];
    foreach(int pt; pts){
        append(positions, vector(point(input,"P",pt)));
    }
    return positions;
}

// ==============================
// Arrays
// ==============================

// fisher yates shuffle with seed
float[] shuffle(float arr[]; float seed) {
    int n = len(arr);
    int i, j;
    float tmp;
    for (i = n - 1; i > 0; i--) {
        j = int((i+1)*rand(101 + i*seed + 1337*seed));
        tmp = arr[j];
        arr[j] = arr[i];
        arr[i] = tmp;
   }
   return arr;
}

// fisher yates shuffle with seed
int[] shuffleInt(int arr[]; float seed) {
    int n = len(arr);
    int i, j;
    float tmp;
    for (i = n - 1; i > 0; i--) {
        j = int((i+1)*rand(101 + i*seed + 1337*seed));
        tmp = arr[j];
        arr[j] = arr[i];
        arr[i] = tmp;
   }
   return arr;
}

// simple rnadom choice from array
int randchoice(int arr[]; float seed){
    int ind = randint(0, len(arr)-1, seed);
    return arr[ind];
}

float randchoice(float arr[]; float seed){
    int ind = randint(0, len(arr)-1, seed);
    return arr[ind];
}

// fisher yates argshuffle with seed
// UNFINISHED TODO
arg[] argshuffle(float arr[]; float seed) {
    int n = len(arr);
    int args[] = array();
    int i, j;
    float tmp;
    for (i = n - 1; i > 0; i--) {
        j = int((i+1)*rand( 1337 + i*seed + 101*seed));
        tmp = arr[j];
        arr[j] = arr[i];
        arr[i] = tmp;
   }
   return arr;
}